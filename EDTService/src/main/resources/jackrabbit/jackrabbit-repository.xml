<?xml version="1.0" encoding="UTF-8"?>
<!-- the Repository element configures a repository instance; individual 
	workspaces of the repository are configured through separate configuration 
	files called workspace.xml which are located in a subfolder of the workspaces 
	root directory (see Workspaces element). it consists of a FileSystem element 
	(the virtual file system used by the repository to persist global state such 
	as registered namespaces, custom node types, etc.. a Security element that 
	specifies the name of the app-entry in the JAAS config and the access manager 
	a Workspaces element that specifies to the location of workspaces root directory 
	and the name of default workspace a Workspace element that is used as a workspace 
	configuration template; it is used to create the initial workspace if there's 
	no workspace yet and for creating additional workspaces through the api a 
	Versioning element that is used for configuring versioning-related settings 
	a SearchIndex element that is used for configuring Indexing-related settings 
	on the /jcr:system tree. -->
<!-- a virtual file system -->
<!-- the Security element specifies the name (appName attribute) of the JAAS 
	configuration app-entry for this repository. it also specifies the access 
	manager to be used (AccessManager element). -->
<!-- the AccessManager element configures the access manager to be used by 
	this repository instance; the class attribute specifies the FQN of the class 
	implementing the AccessManager interface -->
<!-- generic parameter (name/value pair) -->
<!-- the LoginModule element optionally specifies a JAAS login module to 
	authenticate users. This feature allows the use of Jackrabbit in a non-JAAS 
	environment. -->
<!-- the Workspaces element specifies the workspaces root directory (rootPath 
	attribute) and the name of the default workspace (defaultWorkspace attribute). 
	individual workspaces are configured through individual workspace.xml files 
	located in a subfolder each of the workspaces root directory. -->
<!-- the Workspace element serves as a workspace configuration template; 
	it is used to create the initial workspace if there's no workspace yet and 
	for creating additional workspaces through the api -->
<!-- the PersistenceManager element configures the persistence manager to 
	be used for the workspace; the class attribute specifies the FQN of the class 
	implementing the PersistenceManager interface -->
<!-- the SearchIndex element specifies the locaction of the search index 
	(used by the QueryHandler); the class attribute specifies the FQN of the 
	class implementing the QueryHandler interface. -->
<!-- the Versioning element configures the persistence manager to be used 
	for persisting version state -->
<!-- Example Repository Configuration File -->
<Repository>
	<!-- virtual file system where the repository stores global state (e.g. 
		registered namespaces, custom node types, etc.) -->
	<FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
		<param name="path" value="${rep.home}/repository" />
	</FileSystem>
	<!-- security configuration -->
	<Security appName="Jackrabbit">
		<!-- access manager: class: FQN of class implementing the AccessManager 
			interface -->
		<AccessManager
			class="org.apache.jackrabbit.core.security.simple.SimpleAccessManager">
			<!-- <param name="config" value="${rep.home}/access.xml"/> -->
		</AccessManager>
		<LoginModule
			class="org.apache.jackrabbit.core.security.simple.SimpleLoginModule">
			<!-- anonymous user name ('anonymous' is the default value) -->
			<param name="anonymousId" value="anonymous" />
			<!-- default user name to be used instead of the anonymous user when no 
				login credentials are provided (unset by default) -->
			<!-- <param name="defaultUserId" value="superuser"/> -->
		</LoginModule>
	</Security>
	<!-- location of workspaces root directory and name of default workspace -->
	<Workspaces rootPath="${rep.home}/workspaces"
		defaultWorkspace="default" />
	<!-- workspace configuration template: used to create the initial workspace 
		if there's no workspace yet -->
	<Workspace name="${wsp.name}">
		<!-- virtual file system of the workspace: class: FQN of class implementing 
			the FileSystem interface -->
		<FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
			<param name="path" value="${wsp.home}" />
		</FileSystem>
		<!-- persistence manager of the workspace: class: FQN of class implementing 
			the PersistenceManager interface -->
		<!-- <PersistenceManager class="org.apache.jackrabbit.core.persistence.pool.DerbyPersistenceManager"> 
			<param name="url" value="jdbc:derby:${wsp.home}/db;create=true" /> <param 
			name="schemaObjectPrefix" value="${wsp.name}_" /> </PersistenceManager> -->
		<PersistenceManager
			class="org.apache.jackrabbit.core.persistence.bundle.BundleFsPersistenceManager" />
		<!-- Search index and the file system it uses. class: FQN of class implementing 
			the QueryHandler interface -->
		<SearchIndex class="org.apache.jackrabbit.core.query.lucene.SearchIndex">
			<param name="path" value="${wsp.home}/index" />
		</SearchIndex>
	</Workspace>
	<!-- Configures the versioning -->
	<Versioning rootPath="${rep.home}/version">
		<!-- Configures the filesystem to use for versioning for the respective 
			persistence manager -->
		<FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
			<param name="path" value="${rep.home}/version" />
		</FileSystem>
		<!-- Configures the persistence manager to be used for persisting version 
			state. Please note that the current versioning implementation is based on 
			a 'normal' persistence manager, but this could change in future implementations. -->
	<!-- 	<PersistenceManager
			class="org.apache.jackrabbit.core.persistence.pool.DerbyPersistenceManager">
			<param name="url" value="jdbc:derby:${rep.home}/version/db;create=true" />
			<param name="schemaObjectPrefix" value="version_" />
		</PersistenceManager> -->
		<PersistenceManager
			class="org.apache.jackrabbit.core.persistence.bundle.BundleFsPersistenceManager" />
	</Versioning>
	<!-- Search index for content that is shared repository wide (/jcr:system 
		tree, contains mainly versions) -->
	<SearchIndex class="org.apache.jackrabbit.core.query.lucene.SearchIndex">
		<param name="path" value="${rep.home}/repository/index" />
	</SearchIndex>
</Repository>